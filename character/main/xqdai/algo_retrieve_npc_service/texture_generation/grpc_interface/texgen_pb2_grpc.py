# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import texgen_pb2 as texgen__pb2


class TexgenStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewJob = channel.unary_unary(
                '/texgen.Texgen/NewJob',
                request_serializer=texgen__pb2.JobRequest.SerializeToString,
                response_deserializer=texgen__pb2.JobReply.FromString,
                )
        self.QueryJobStatus = channel.unary_unary(
                '/texgen.Texgen/QueryJobStatus',
                request_serializer=texgen__pb2.JobStatusRequest.SerializeToString,
                response_deserializer=texgen__pb2.JobStatusReply.FromString,
                )
        self.QueryServerStatus = channel.unary_unary(
                '/texgen.Texgen/QueryServerStatus',
                request_serializer=texgen__pb2.ServerStatusRequest.SerializeToString,
                response_deserializer=texgen__pb2.ServerStatusReply.FromString,
                )
        self.Add = channel.unary_unary(
                '/texgen.Texgen/Add',
                request_serializer=texgen__pb2.AdditionRequest.SerializeToString,
                response_deserializer=texgen__pb2.AdditionResponse.FromString,
                )
        self.RunFunc = channel.unary_unary(
                '/texgen.Texgen/RunFunc',
                request_serializer=texgen__pb2.RunFuncRequest.SerializeToString,
                response_deserializer=texgen__pb2.RunFuncResponse.FromString,
                )
        self.QueryRunState = channel.unary_unary(
                '/texgen.Texgen/QueryRunState',
                request_serializer=texgen__pb2.QueryRunStateRequest.SerializeToString,
                response_deserializer=texgen__pb2.QueryRunStateResponse.FromString,
                )


class TexgenServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NewJob(self, request, context):
        """new job, run obj texture generation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryJobStatus(self, request, context):
        """query job status once 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryServerStatus(self, request, context):
        """query server status once 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Add(self, request, context):
        """Add func for debug
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunFunc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryRunState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TexgenServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewJob': grpc.unary_unary_rpc_method_handler(
                    servicer.NewJob,
                    request_deserializer=texgen__pb2.JobRequest.FromString,
                    response_serializer=texgen__pb2.JobReply.SerializeToString,
            ),
            'QueryJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryJobStatus,
                    request_deserializer=texgen__pb2.JobStatusRequest.FromString,
                    response_serializer=texgen__pb2.JobStatusReply.SerializeToString,
            ),
            'QueryServerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryServerStatus,
                    request_deserializer=texgen__pb2.ServerStatusRequest.FromString,
                    response_serializer=texgen__pb2.ServerStatusReply.SerializeToString,
            ),
            'Add': grpc.unary_unary_rpc_method_handler(
                    servicer.Add,
                    request_deserializer=texgen__pb2.AdditionRequest.FromString,
                    response_serializer=texgen__pb2.AdditionResponse.SerializeToString,
            ),
            'RunFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.RunFunc,
                    request_deserializer=texgen__pb2.RunFuncRequest.FromString,
                    response_serializer=texgen__pb2.RunFuncResponse.SerializeToString,
            ),
            'QueryRunState': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryRunState,
                    request_deserializer=texgen__pb2.QueryRunStateRequest.FromString,
                    response_serializer=texgen__pb2.QueryRunStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'texgen.Texgen', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Texgen(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NewJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texgen.Texgen/NewJob',
            texgen__pb2.JobRequest.SerializeToString,
            texgen__pb2.JobReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texgen.Texgen/QueryJobStatus',
            texgen__pb2.JobStatusRequest.SerializeToString,
            texgen__pb2.JobStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryServerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texgen.Texgen/QueryServerStatus',
            texgen__pb2.ServerStatusRequest.SerializeToString,
            texgen__pb2.ServerStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texgen.Texgen/Add',
            texgen__pb2.AdditionRequest.SerializeToString,
            texgen__pb2.AdditionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texgen.Texgen/RunFunc',
            texgen__pb2.RunFuncRequest.SerializeToString,
            texgen__pb2.RunFuncResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryRunState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/texgen.Texgen/QueryRunState',
            texgen__pb2.QueryRunStateRequest.SerializeToString,
            texgen__pb2.QueryRunStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
